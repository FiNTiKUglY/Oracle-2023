CREATE TABLE LOGS_PERSON
(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    ACTION VARCHAR2(255) NOT NULL,
    TIME TIMESTAMP NOT NULL,
    PERSON_ID NUMBER NOT NULL,
    OLD_PERSON_NAME VARCHAR(100),
    OLD_PERSON_BIRTHDAY DATE,
    OLD_PERSON_AMOUNT NUMBER,
    NEW_PERSON_NAME VARCHAR(100),
    NEW_PERSON_BIRTHDAY DATE,
    NEW_PERSON_AMOUNT NUMBER,
    PRIMARY KEY(ID)
);

CREATE TABLE LOGS_PUBLISHER
(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    ACTION VARCHAR2(255) NOT NULL,
    TIME TIMESTAMP NOT NULL,
    PUBLISHER_ID NUMBER NOT NULL,
    OLD_PUBLISHER_NAME VARCHAR(100),
    OLD_PUBLISHER_OPENING DATE,
    OLD_PUBLISHER_AMOUNT NUMBER,
    NEW_PUBLISHER_NAME VARCHAR(100),
    NEW_PUBLISHER_OPENING DATE,
    NEW_PUBLISHER_AMOUNT NUMBER,
    PRIMARY KEY(ID)
);

CREATE TABLE LOGS_BOOK
(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    ACTION VARCHAR2(255) NOT NULL,
    TIME TIMESTAMP NOT NULL,
    BOOK_ID NUMBER NOT NULL,
    OLD_BOOK_TITLE VARCHAR(100),
    OLD_BOOK_RELEASE DATE,
    OLD_BOOK_PUBLISHER_ID NUMBER,
    OLD_BOOK_PERSON_ID NUMBER,
    NEW_BOOK_TITLE VARCHAR(100),
    NEW_BOOK_RELEASE DATE,
    NEW_BOOK_PUBLISHER_ID NUMBER,
    NEW_BOOK_PERSON_ID NUMBER,
    PRIMARY KEY(ID)
);

CREATE OR REPLACE TRIGGER PERSONS_LOGS_TRIGGER
AFTER INSERT OR UPDATE OR DELETE ON PERSONS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGS_PERSON(ACTION, TIME, PERSON_ID, NEW_PERSON_NAME, NEW_PERSON_BIRTHDAY, NEW_PERSON_AMOUNT)
            VALUES ('INSERT', SYSTIMESTAMP, :NEW.ID, :NEW.NAME, :NEW.BIRTHDAY_DATE, :NEW.BOOKS_AMOUNT);
    ELSIF UPDATING THEN
        INSERT INTO LOGS_PERSON(ACTION, TIME, PERSON_ID, NEW_PERSON_NAME, NEW_PERSON_BIRTHDAY, NEW_PERSON_AMOUNT, OLD_PERSON_NAME, OLD_PERSON_BIRTHDAY, OLD_PERSON_AMOUNT)
            VALUES ('UPDATE', SYSTIMESTAMP, :NEW.ID, :NEW.NAME, :NEW.BIRTHDAY_DATE, :NEW.BOOKS_AMOUNT, :OLD.NAME, :OLD.BIRTHDAY_DATE, :OLD.BOOKS_AMOUNT);
    ELSIF DELETING THEN
        INSERT INTO LOGS_PERSON(ACTION, TIME, PERSON_ID, OLD_PERSON_NAME, OLD_PERSON_BIRTHDAY, OLD_PERSON_AMOUNT)
            VALUES ('DELETE', SYSTIMESTAMP, :OLD.ID, :OLD.NAME, :OLD.BIRTHDAY_DATE, :OLD.BOOKS_AMOUNT);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER PUBLISHERS_LOGS_TRIGGER
AFTER INSERT OR UPDATE OR DELETE ON PUBLISHERS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGS_PUBLISHER(ACTION, TIME, PUBLISHER_ID, NEW_PUBLISHER_NAME, NEW_PUBLISHER_OPENING, NEW_PUBLISHER_AMOUNT)
            VALUES ('INSERT', SYSTIMESTAMP, :NEW.ID, :NEW.NAME, :NEW.OPENING_DATE, :NEW.BOOKS_AMOUNT);
    ELSIF UPDATING THEN
        INSERT INTO LOGS_PUBLISHER(ACTION, TIME, PUBLISHER_ID, NEW_PUBLISHER_NAME, NEW_PUBLISHER_OPENING, NEW_PUBLISHER_AMOUNT, OLD_PUBLISHER_NAME, OLD_PUBLISHER_OPENING, OLD_PUBLISHER_AMOUNT)
            VALUES ('UPDATE', SYSTIMESTAMP, :NEW.ID, :NEW.NAME, :NEW.OPENING_DATE, :NEW.BOOKS_AMOUNT, :OLD.NAME, :OLD.OPENING_DATE, :OLD.BOOKS_AMOUNT);
    ELSIF DELETING THEN
        INSERT INTO LOGS_PUBLISHER(ACTION, TIME, PUBLISHER_ID, OLD_PUBLISHER_NAME, OLD_PUBLISHER_OPENING, OLD_PUBLISHER_AMOUNT)
            VALUES ('DELETE', SYSTIMESTAMP, :OLD.ID, :OLD.NAME, :OLD.OPENING_DATE, :OLD.BOOKS_AMOUNT);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER BOOKS_LOGS_TRIGGER
AFTER INSERT OR UPDATE OR DELETE ON BOOKS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGS_BOOK(ACTION, TIME, BOOK_ID, NEW_BOOK_TITLE, NEW_BOOK_RELEASE, NEW_BOOK_PERSON_ID, NEW_BOOK_PUBLISHER_ID)
            VALUES ('INSERT', SYSTIMESTAMP, :NEW.ID, :NEW.TITLE, :NEW.RELEASE_DATE, :NEW.PERSON_ID, :NEW.PUBLISHER_ID);
    ELSIF UPDATING THEN
        INSERT INTO LOGS_BOOK(ACTION, TIME, BOOK_ID, NEW_BOOK_TITLE, NEW_BOOK_RELEASE, NEW_BOOK_PERSON_ID, NEW_BOOK_PUBLISHER_ID, OLD_BOOK_TITLE, OLD_BOOK_RELEASE, OLD_BOOK_PERSON_ID, OLD_BOOK_PUBLISHER_ID)
            VALUES ('UPDATE', SYSTIMESTAMP, :NEW.ID, :NEW.TITLE, :NEW.RELEASE_DATE, :NEW.PERSON_ID, :NEW.PUBLISHER_ID, :OLD.TITLE, :OLD.RELEASE_DATE, :OLD.PERSON_ID, :OLD.PUBLISHER_ID);
    ELSIF DELETING THEN
        INSERT INTO LOGS_BOOK(ACTION, TIME, BOOK_ID, OLD_BOOK_TITLE, OLD_BOOK_RELEASE, OLD_BOOK_PERSON_ID, OLD_BOOK_PUBLISHER_ID)
            VALUES ('DELETE', SYSTIMESTAMP, :OLD.ID, :OLD.TITLE, :OLD.RELEASE_DATE, :OLD.PERSON_ID, :OLD.PUBLISHER_ID);
    END IF;
END;
/