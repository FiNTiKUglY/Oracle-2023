CREATE OR REPLACE PACKAGE BACKUP_DATA IS
    PROCEDURE BACKUP_PERSONS(BACKUP_TIME TIMESTAMP);
    PROCEDURE BACKUP_PUBLISHERS(BACKUP_TIME TIMESTAMP);
    PROCEDURE BACKUP_BOOKS(BACKUP_TIME TIMESTAMP);

    PROCEDURE BACKUP_PERSONS(mls NUMBER);
    PROCEDURE BACKUP_PUBLISHERS(mls NUMBER);
    PROCEDURE BACKUP_BOOKS(mls NUMBER);
END BACKUP_DATA;
/

CREATE OR REPLACE PACKAGE BODY BACKUP_DATA IS
    PROCEDURE BACKUP_PERSONS(BACKUP_TIME TIMESTAMP) AS
        CURSOR ct1 IS
        SELECT *
        FROM LOGS_PERSON
        WHERE TIME >= BACKUP_TIME
        ORDER BY TIME;
    BEGIN
        EXECUTE IMMEDIATE 'ALTER TRIGGER PERSONS_LOGS_TRIGGER DISABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER PUBLISHERS_LOGS_TRIGGER DISABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER BOOKS_LOGS_TRIGGER DISABLE';
        FOR record IN ct1
        LOOP
            IF record.ACTION = 'INSERT' THEN
                DELETE FROM PERSONS WHERE ID = record.PERSON_ID;
                DELETE FROM LOGS_PERSON WHERE ID = record.ID;
            ELSIF record.ACTION = 'UPDATE' THEN
                UPDATE PERSONS
                SET NAME = record.OLD_PERSON_NAME, BIRTHDAY_DATE = record.OLD_PERSON_BIRTHDAY, BOOKS_AMOUNT = record.OLD_PERSON_AMOUNT
                WHERE ID = record.PERSON_ID;
                DELETE FROM LOGS_PERSON WHERE ID = record.ID;
            ELSE
                INSERT INTO PERSONS(ID, NAME, BIRTHDAY_DATE, BOOKS_AMOUNT)
                VALUES (record.PERSON_ID, record.OLD_PERSON_NAME, record.OLD_PERSON_BIRTHDAY, record.OLD_PERSON_AMOUNT);
                DELETE FROM LOGS_PERSON WHERE ID = record.ID;
            END IF;
        END LOOP;
        EXECUTE IMMEDIATE 'ALTER TRIGGER PERSONS_LOGS_TRIGGER ENABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER PUBLISHERS_LOGS_TRIGGER ENABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER BOOKS_LOGS_TRIGGER ENABLE';
    END;

    PROCEDURE BACKUP_PUBLISHERS(BACKUP_TIME TIMESTAMP) AS
        CURSOR ct1 IS
        SELECT *
        FROM LOGS_PUBLISHER
        WHERE TIME >= BACKUP_TIME
        ORDER BY TIME;
    BEGIN
        EXECUTE IMMEDIATE 'ALTER TRIGGER PERSONS_LOGS_TRIGGER DISABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER PUBLISHERS_LOGS_TRIGGER DISABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER BOOKS_LOGS_TRIGGER DISABLE';
        FOR record IN ct1
        LOOP
            IF record.ACTION = 'INSERT' THEN
                DELETE FROM PUBLISHERS WHERE ID = record.PUBLISHER_ID;
                DELETE FROM LOGS_PUBLISHER WHERE ID = record.ID;
            ELSIF record.ACTION = 'UPDATE' THEN
                UPDATE PUBLISHERS
                SET NAME = record.OLD_PUBLISHER_NAME, OPENING_DATE = record.OLD_PUBLISHER_OPENING, BOOKS_AMOUNT = record.OLD_PUBLISHER_AMOUNT
                WHERE ID = record.PUBLISHER_ID;
                DELETE FROM LOGS_PUBLISHER WHERE ID = record.ID;
            ELSE
                INSERT INTO PUBLISHERS(ID, NAME, OPENING_DATE, BOOKS_AMOUNT)
                VALUES (record.PUBLISHER_ID, record.OLD_PUBLISHER_NAME, record.OLD_PUBLISHER_OPENING, record.OLD_PUBLISHER_AMOUNT);
                DELETE FROM LOGS_PUBLISHER WHERE ID = record.ID;
            END IF;
        END LOOP;
        EXECUTE IMMEDIATE 'ALTER TRIGGER PERSONS_LOGS_TRIGGER ENABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER PUBLISHERS_LOGS_TRIGGER ENABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER BOOKS_LOGS_TRIGGER ENABLE';
    END;

    PROCEDURE BACKUP_BOOKS(BACKUP_TIME TIMESTAMP) AS
        CURSOR ct1 IS
        SELECT *
        FROM LOGS_BOOK
        WHERE TIME >= BACKUP_TIME
        ORDER BY TIME;
    BEGIN
        EXECUTE IMMEDIATE 'ALTER TRIGGER PERSONS_LOGS_TRIGGER DISABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER PUBLISHERS_LOGS_TRIGGER DISABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER BOOKS_LOGS_TRIGGER DISABLE';
        FOR record IN ct1
        LOOP
            IF record.ACTION = 'INSERT' THEN
                DELETE FROM BOOKS WHERE ID = record.BOOK_ID;
                DELETE FROM LOGS_BOOK WHERE ID = record.ID;
            ELSIF record.ACTION = 'UPDATE' THEN
                UPDATE BOOKS
                SET TITLE = record.OLD_BOOK_TITLE, RELEASE_DATE = record.OLD_BOOK_RELEASE, PERSON_ID = record.OLD_BOOK_PERSON_ID, PUBLISHER_ID = record.OLD_BOOK_PUBLISHER_ID
                WHERE ID = record.BOOK_ID;
                DELETE FROM LOGS_BOOK WHERE ID = record.ID;
            ELSE
                INSERT INTO BOOKS(ID, TITLE, RELEASE_DATE, PERSON_ID, PUBLISHER_ID)
                VALUES (record.BOOK_ID, record.OLD_BOOK_TITLE, record.OLD_BOOK_RELEASE, record.OLD_BOOK_PERSON_ID, record.OLD_BOOK_PUBLISHER_ID);
                DELETE FROM LOGS_BOOK WHERE ID = record.ID;
            END IF;
        END LOOP;
        EXECUTE IMMEDIATE 'ALTER TRIGGER PERSONS_LOGS_TRIGGER ENABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER PUBLISHERS_LOGS_TRIGGER ENABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER BOOKS_LOGS_TRIGGER ENABLE';
    END;

    PROCEDURE BACKUP_PERSONS(mls NUMBER) IS
        time TIMESTAMP;
    BEGIN
        SELECT SYSTIMESTAMP - NUMTODSINTERVAL(mls / 1000, 'SECOND')
        INTO time
        FROM DUAL;

        BACKUP_PERSONS(time);
    END;

    PROCEDURE BACKUP_PUBLISHERS(mls NUMBER) IS
        time TIMESTAMP;
    BEGIN
        SELECT SYSTIMESTAMP - NUMTODSINTERVAL(mls / 1000, 'SECOND')
        INTO time
        FROM DUAL;

        BACKUP_PUBLISHERS(time);
    END;

    PROCEDURE BACKUP_BOOKS(mls NUMBER) IS
        time TIMESTAMP;
    BEGIN
        SELECT SYSTIMESTAMP - NUMTODSINTERVAL(mls / 1000, 'SECOND')
        INTO time
        FROM DUAL;

        BACKUP_BOOKS(time);
    END;

    PROCEDURE BACKUP_DATA(BACKUP_TIME TIMESTAMP) IS
    BEGIN
        EXECUTE IMMEDIATE 'ALTER TRIGGER PERSONS_LOGS_TRIGGER DISABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER PUBLISHERS_LOGS_TRIGGER DISABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER BOOKS_LOGS_TRIGGER DISABLE';
        BACKUP_PERSONS(BACKUP_TIME);
        BACKUP_PUBLISHERS(BACKUP_TIME);
        BACKUP_BOOKS(BACKUP_TIME);
        EXECUTE IMMEDIATE 'ALTER TRIGGER PERSONS_LOGS_TRIGGER ENABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER PUBLISHERS_LOGS_TRIGGER ENABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER BOOKS_LOGS_TRIGGER ENABLE';
    END;

    PROCEDURE BACKUP_DATA(mls NUMBER) IS
    BEGIN
        EXECUTE IMMEDIATE 'ALTER TRIGGER PERSONS_LOGS_TRIGGER DISABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER PUBLISHERS_LOGS_TRIGGER DISABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER BOOKS_LOGS_TRIGGER DISABLE';
        BACKUP_PERSONS(mls);
        BACKUP_PUBLISHERS(mls);
        BACKUP_BOOKS(mls);
        EXECUTE IMMEDIATE 'ALTER TRIGGER PERSONS_LOGS_TRIGGER ENABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER PUBLISHERS_LOGS_TRIGGER ENABLE';
        EXECUTE IMMEDIATE 'ALTER TRIGGER BOOKS_LOGS_TRIGGER ENABLE';
    END;
END BACKUP_DATA;